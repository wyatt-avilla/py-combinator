from collections.abc import Callable
from typing import TypeVar

_T = TypeVar("_T")
_U = TypeVar("_U")

class BaseIterator[_T]:
    def to_list(self) -> list[_T]: ...
    def fold(self, init: _T, f: Callable[[_T, _T], _T]) -> _T: ...
    def map(self, f: Callable[[_T], _U]) -> BaseIterator[_U]: ...
    def filter(self, f: Callable[[_T], bool]) -> BaseIterator[_T]: ...
    def enumerate(self) -> BaseIterator[tuple[int, _T]]: ...
    def take(self) -> SizedDoubleEndedIterator[_T]: ...

class DoubleEndedIterator[_T]:
    def to_list(self) -> list[_T]: ...
    def fold(self, init: _T, f: Callable[[_T, _T], _T]) -> _T: ...
    def map(self, f: Callable[[_T], _U]) -> DoubleEndedIterator[_U]: ...
    def filter(self, f: Callable[[_T], bool]) -> DoubleEndedIterator[_T]: ...
    def take(self) -> SizedDoubleEndedIterator[_T]: ...
    def rev(self) -> DoubleEndedIterator[_T]: ...

class ExactSizeIterator[_T]:
    def to_list(self) -> list[_T]: ...
    def fold(self, init: _T, f: Callable[[_T, _T], _T]) -> _T: ...
    def map(self, f: Callable[[_T], _U]) -> ExactSizeIterator[_U]: ...
    def filter(self, f: Callable[[_T], bool]) -> BaseIterator[_T]: ...
    def enumerate(self) -> ExactSizeIterator[tuple[int, _T]]: ...
    def take(self) -> SizedDoubleEndedIterator[_T]: ...

class SizedDoubleEndedIterator[_T]:
    def to_list(self) -> list[_T]: ...
    def fold(self, init: _T, f: Callable[[_T, _T], _T]) -> _T: ...
    def map(self, f: Callable[[_T], _U]) -> SizedDoubleEndedIterator[_U]: ...
    def filter(self, f: Callable[[_T], bool]) -> DoubleEndedIterator[_T]: ...
    def enumerate(self) -> SizedDoubleEndedIterator[tuple[int, _T]]: ...
    def take(self) -> SizedDoubleEndedIterator[_T]: ...
    def rev(self) -> SizedDoubleEndedIterator[_T]: ...
