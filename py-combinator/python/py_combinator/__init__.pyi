from collections.abc import Callable, Iterable

class BaseIterator[T]:
    def to_list(self) -> list[T]: ...
    def fold(self, init: T, f: Callable[[T, T], T]) -> T: ...
    def map[U](self, f: Callable[[T], U]) -> BaseIterator[U]: ...
    def filter(self, f: Callable[[T], bool]) -> BaseIterator[T]: ...
    def enumerate(self) -> BaseIterator[tuple[int, T]]: ...
    def take(self, n: int) -> SizedDoubleEndedIterator[T]: ...

class DoubleEndedIterator[T]:
    def to_list(self) -> list[T]: ...
    def fold(self, init: T, f: Callable[[T, T], T]) -> T: ...
    def map[U](self, f: Callable[[T], U]) -> DoubleEndedIterator[U]: ...
    def filter(self, f: Callable[[T], bool]) -> DoubleEndedIterator[T]: ...
    def take(self, n: int) -> SizedDoubleEndedIterator[T]: ...
    def rev(self) -> DoubleEndedIterator[T]: ...

class ExactSizeIterator[T]:
    def to_list(self) -> list[T]: ...
    def fold(self, init: T, f: Callable[[T, T], T]) -> T: ...
    def map[U](self, f: Callable[[T], U]) -> ExactSizeIterator[U]: ...
    def filter(self, f: Callable[[T], bool]) -> BaseIterator[T]: ...
    def enumerate(self) -> ExactSizeIterator[tuple[int, T]]: ...
    def take(self, n: int) -> SizedDoubleEndedIterator[T]: ...

class SizedDoubleEndedIterator[T]:
    def to_list(self) -> list[T]: ...
    def fold(self, init: T, f: Callable[[T, T], T]) -> T: ...
    def map[U](self, f: Callable[[T], U]) -> SizedDoubleEndedIterator[U]: ...
    def filter(self, f: Callable[[T], bool]) -> DoubleEndedIterator[T]: ...
    def enumerate(self) -> SizedDoubleEndedIterator[tuple[int, T]]: ...
    def take(self, n: int) -> SizedDoubleEndedIterator[T]: ...
    def rev(self) -> SizedDoubleEndedIterator[T]: ...

def iterator_from[T](
    iterable: Iterable[T],
) -> (
    BaseIterator[T]
    | DoubleEndedIterator[T]
    | ExactSizeIterator[T]
    | SizedDoubleEndedIterator[T]
): ...
